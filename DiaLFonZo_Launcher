#include "SevenSegmentTM1637.h"
#include "SevenSegmentExtended.h"

// ==================================
//  globals
// ==================================
// ----- Encoder outputs
#define ContactA 3
#define ContactB 4

// ----- Logic
boolean LastStateA;
boolean CurrentStateA;
boolean CurrentStateB;

// ----- Counter
int Count = 0;
int LastCount = Count;

const byte PIN_CLK = 5;   // define CLK pin (any digital pin)
const byte PIN_DIO = 6;   // define DIO pin (any digital pin)
SevenSegmentTM1637    display(PIN_CLK, PIN_DIO);
const unsigned int clockSpeed = 10000;    // speed up clock for demo

// ==================================
//  setup()
// ==================================
void setup() {
  // ----- Configure Serial port
  Serial.begin(9600);

  // ----- Display initial count
  Serial.print("Count: ");
  Serial.println(Count);

  // ----- Configure encoder
  pinMode(ContactA, INPUT_PULLUP);
  pinMode(ContactB, INPUT_PULLUP);
  LastStateA = stateContactA();
  
  display.begin();            // initializes the display
  display.setBacklight(100);  // set the brightness to 100 %
  delay(1000);                // wait 1000 ms
  display.clear();                      // clear the display
}

// ==================================
//  loop()
// ==================================
void loop() {
  // ----- Poll Contact A
  checkEncoder();

  // ----- Display the count if it has changed
  if (Count != LastCount) 
  displayCount();           // Display the number of "detents"
}

// ==================================
//  checkEncoder()
// ==================================
void checkEncoder() {
  /*
     The encoder output comprises two 90 degree offset squarewaves.
     The direction of rotation is:
     - clockwise if the state of output A is opposite to output B
     - counterclockwise if the state of output A is the same as output B
  */
  // ----- Check encoder output
  CurrentStateA = stateContactA();

  // ----- Record changes
  if (CurrentStateA != LastStateA) {
    CurrentStateB = digitalRead(ContactB);          // Check state of ContactB
    if (CurrentStateA == CurrentStateB) Count++;    // Clockwise rotation
    if (CurrentStateA != CurrentStateB) Count--;    // Counterclockwise rotation
    LastStateA = CurrentStateA;
  }
}

// ==================================
//  stateContactA()
// ==================================
boolean stateContactA() {
  /*
      Two integrators are used to suppress contact bounce.
      The first integrator to reach MaxCount wins
  */
  // ----- Locals
  int Closed = 0;                                   // Integrator
  int Open = 0;                                     // Integrator
  int MaxCount = 250;                               // Increase this value if you see contact bounce

  // ----- Debounce Contact A
  while (1) {
    // ----- Check ContactA
    if (digitalRead(ContactA)) {
      // ----- ContactA is Open
      Closed = 0;                                   // Empty opposite integrator
      Open++;                                       // Integrate
      if (Open > MaxCount) return HIGH;
    } else {
      // ----- ContactA is Closed
      Open = 0;                                     // Empty opposite integrator
      Closed++;                                     // Integrate
      if (Closed > MaxCount) return LOW;
    }
  }
}

// ==================================
//  displayCount()
// ==================================
void displayCount() {
  /*
     There are two transitions between encoder detents.
     This causes the "Count" to increment twice between indent clicks.
  */
  // ----- Display "indents"
  if (Count % 2 == 0) {
    Serial.print("Count: ");
    Serial.println(Count / 2);                    // Display number of indent clicks
    display.clear();
    display.printDualCounter(0, 0);
    //display.print(Count);
  }
  LastCount = Count;
}
